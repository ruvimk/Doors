To use one of these functions, you have to first push all the parameters to the function you want to use to the stack 
and then you have to push the (offset to the) string with the name of the function you want to call. That string is 
case-sensitive. After you do that, you have to use the stage 3 interrupt. 
If the function was found, the stack pointer will be changed back, as appropriate for the calling function and for the 
function name that was pushed. If the function wasn't found, the stack pointer will be left as it was when the stage 3 
call was initiated. 
Note:  The function name string should not include the parentheses ("()"). For example, if the function is SetGDTdesc() 
then the function name should NOT be defined as SetGDTdesc() but it is defined as SetGDTdesc 
It doesn't matter if the function name includes or does not include spaces. 

Stage 3 interrupt:  0x50 


Function Reference: 

;; SetGDTdesc() 
;; params: 
;;  	pGDT:DWORD	Pointer to the GDT. 
;;  	iGDT:DWORD	Index into the GDT. 
;;  	bGDT:DWORD	Base address for the segment. 
;;  	lGDT:DWORD	Limit value for the segment. 
;;  	sGDT:DWORD	Type of segment (ie code, data, ...; use types from header;) 
;;  	fGDT:DWORD	Flags:  Bits (0=16-bit;1=32-bit;) and Type (00b=system;10b=code/data;) and Segment Present (000b=false;100b=true;) 
;;  					and AVL (Available for use by system software) (0000b=false;1000b=true;) 
;;  	vGDT:DWORD	DPL (Descriptor Privilege Level) 
;; return: 
;;  	pDSC:DWORD	Pointer to the descriptor. 
;; .....  

;; SetGate() 
;;  	params: 
;;  		pTbl:DWORD	Pointer to the table. 
;;  		iTbl:DWORD	Index to the gate. 
;;  		sTbl:DWORD	Segment Selector (/ TSS Segment Selector) 
;;  		oTbl:DWORD	Offset 
;;  		tTbl:DWORD	Type Of Gate (ie task, interrupt, trap; refer to header;) 
;;  		lTbl:DWORD	DPL (Descriptor Privilege Level) 
;;  		bTbl:DWORD	Flags:  Size Of Gate (D) (0=16-bit;1=32-bit;) and Segment Present (P) (00b=gone;10b=present;) 
;;  	return: 
;;  		pEnt:DWORD	Pointer to the gate entry in the table. 
;; .....  

;; GetMemorySize() 
;;  	params: 
;;  		none 
;;  	return: 
;;  		AX= Number of 64KB chunks after 16MB 
;;  		BX= Number of KB between 1MB and 16MB 
;; .....  



Other Reference: 

;; Segment Descriptor: 
;;  	Byte 0 (starting from): 
;;  		Bits 0..15		Segment Limit 0..15 
;;  		Bits 16..31		Base Address 0..15 
;;  	Byte 4 (starting from): 
;;  		Bits 0..7		Base Address 16..23 
;;  		Bits 8..11		Type (segment type) 
;;  		Bit 12  		S (descriptor type) (0=system;1=code/data;) 
;;  		Bits 13..14		DPL (descriptor privilege level) 
;;  		Bit 15  		P (segment present) 
;;  		Bits 16..19		Segment Limit 16..19 
;;  		Bit 20  		AVL (available for system use) 
;;  		Bit 21  		0 
;;  		Bit 22  		D / B (default operation size) (0=16-bit;1=32-bit;) 
;;  		Bit 23  		G (granularity) 
;;  		Bits 24..31		Base Address 24..31 
;; .....  

;; TSS Descriptor: 
;;  D / B (bit 22) = 0 
;;  S (bit 12)     = 0 
;;  Type (8..11)   = 10B1, where B is busy flag 